// drum patterns cobbled together from a couple of sources

uint16_t drumpatterns[] = { // 16 Euclidean + other patterns from here and there 
0b0000000000000000, // empty pattern

0b1000000000000000, // Euclidean 1 beat

0b1000000010000000, // Euclidean 2 beats
0b0000100000000010, // more 2 beat patterns
0b0000001000100000,
0b0000001000000100,
0b0000000010100000,
0b0000000000100010,

0b1000010000100000, // Euclidean 3 beats
0b0000100000001001, // more 3 beat patterns
0b1000000000001001,
0b0000100000001011,
0b0001001001000000,
0b1000001000001000,
0b1010000000000001,

0b1000100010001000, // Euclidean 4 beats
0b1000100010001001, // more 4 beat patterns
0b0000100001001001,
0b0100000100010010,
0b0000001100110000,
0b0000000000001010,

0b1001001001001000, // Euclidean 5 beats
0b0000100001101001, // more 5 beat patterns
0b1000100010001100,
0b1000100010001010,
0b0001100110010000,
0b0000101101100000,

0b1001010010010100, // Euclidean 6 beats
0b0100010101000101, // more 6 beat patterns
0b0010001100100011,
0b1001100010011000,

0b1001010100101010, // Euclidean 7 beats
0b0010001000101111, // more 7 beat patterns
0b1010010010101010,

0b1010101010101010, // Euclidean 8 beats
0b1000100010101111, // more 8 beat patterns
0b1100110011001100,
0b1000101010111010,
0b1111111100000000,
0b1100010111000101,

0b1011010101101010, // Euclidean 9 beats
0b1011001100110011, // more 9 beat patterns

0b1011010110110101, // Euclidean 10 beats
0b1001100110011111, // more 10 beat patterns
0b1110011011100110,

0b1011011011011011, // Euclidean 11 beats
0b0111011101100111, // more 11 beat patterns

0b1011101110111011, // Euclidean 12 beats
0b1101110111011101, // more 12 beat patterns
0b1101110110111101,

0b1011110111101111, // Euclidean 13 beats
0b1011111110111111, // Euclidean 14 beats
0b1111111111111110, // Euclidean 15 beats
0b1111111111111111,  // Euclidean 16 beats

};

#define NUMPATTERNS sizeof(drumpatterns)/sizeof(uint16_t)
